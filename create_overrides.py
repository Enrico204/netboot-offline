import yaml
import pathlib
import requests
import time
import os.path
import json
from nbexceptions import fix_exceptions


def disable_all(uocfg, cfg):
    if "release_overrides" not in uocfg:
        uocfg["release_overrides"] = {}

    ret = "release_overrides:\n"
    for r in cfg["releases"]:
        if r not in uocfg["release_overrides"]:
            uocfg["release_overrides"][r] = {}
        
        uocfg["release_overrides"][r]["enabled"] = False


def replace_all_urls(uocfg, cfg, storageurl):
    for keyname in ["utilitiespcbios", "utilitiesefi", "releases"]:
        overridekey = keyname.replace("releases", "release") + "_overrides"

        for osname in cfg[keyname]:
            # Skip not hardcoded paths
            if not "util_path" in cfg[keyname][osname]:
                continue
            
            if not overridekey in uocfg:
                uocfg[overridekey] = {}
            if osname not in uocfg[overridekey]:
                uocfg[overridekey][osname] = {}

            fileurl = cfg[keyname][osname]["util_path"]
            basefname = fileurl.split("/")[-1]
            uocfg[overridekey][osname]["util_path"] = "%s/__external/%s/%s/%s" % (storageurl, keyname, osname, basefname)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description="Create a full offline copy of Netboot.xyz images")
    parser.add_argument("--disable-all", dest="disableall", action="store_const", const=True, default=False, help="Disable all releases (download only utility)")
    parser.add_argument("--root", required=True, dest="root", help="Netboot.xyz root directory (without trailing slash)")
    parser.add_argument("--http-storage", required=True, dest="storage", help="The HTTP URL for downloaded ISO (eg. the out/ directory generated by download_all.py), without trailing slash")
    parser.add_argument("--out", dest="out", default=None, help="Write the result in this file instead of overwriting the user_overrides.yml")


    args = parser.parse_args()

    cfg = yaml.safe_load(open(args.root + "/roles/netbootxyz/defaults/main.yml").read())
    uocfg = yaml.safe_load(open(args.root + "/user_overrides.yml").read())
    
    uocfg["live_endpoint"] = args.storage

    replace_all_urls(uocfg, cfg, args.storage)

    if args.disableall:
        disable_all(uocfg, cfg)
    
    fix_exceptions(args.root, args.storage)

    with open(args.out if args.out is not None else (args.root + "/user_overrides.yml"), "w") as f:
        yaml.dump(uocfg, f, default_flow_style=False)
